#include <iostream>

using namespace std;

class Stack {
//structure for stack
    struct Tstruct {
        int value;
        Tstruct * next;
    };

    // pointer to the top of stack

    Tstruct * TOP;
    //public methods
    public:
    // constructor - initializes the stack - sets the
    // TOP to NULL
    Stack() {
        TOP = NULL;
    }

    // Push - pushes new value to the TOP of the stack
    void Push(int VALUE) {
        // helping pointer
        Tstruct * l_hlp;
        // try to allocate the memory
        try {
            l_hlp = new Tstruct;
        }
        catch (const std::bad_alloc& e) {
            throw std::runtime_error(e.what());
        } // new member points to the recent TOP
        l_hlp->next = TOP;
        //store value
        l_hlp->value = VALUE;
        // new member becomes new TOP
        TOP = l_hlp;
    };

    // Pop - pops and returns value from the top of the stack
    int Pop () {
        if (TOP == NULL) {
            throw std::runtime_error( "Stack is empty" );
            return 0;
        }
        // helping variables
        Tstruct *l_hlp;
        int l_val;
        // store pointer to the TOP
        l_hlp = TOP;
        // TOP points to the following element
        TOP = l_hlp->next;
        //store value from the TOP
        l_val = l_hlp->value;
        // delete previous TOP
        delete l_hlp;
        // returns the value from previous TOP
        return l_val;
    };

    // Show - returns value from the top of the stack
    // without poping it
    int Show () {
        if (TOP) {
            return TOP->value;
        }
        else {
            throw std::runtime_error( "Stack is empty" );
            return 0;
        }
    };

    //IsEmpty - returns true/false if the stack is/is not empty
    bool IsEmpty () {
        return !bool(TOP);
    };

    //Empty - empties the stack
    void Empty() {
        while (!IsEmpty()) Pop();
    };

    // destructor - destroys whole structure
    ~Stack() {
        Empty();
        delete(TOP);
    };

};


int main()
{
    // create new object
    Stack stack;
    // fill the stack with some values
    for(int i = 1; i<= 5; i++) stack.Push(i);
    cout << stack.Show() << endl;
    // popping all elements from the stack and displaying its values
    while (!stack.IsEmpty()) cout << stack.Pop() << ", ";
    return 0;
    //k zasobniku pristupujeme pomoci funkci - bezpecne
}
