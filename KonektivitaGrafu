#include <iostream>
#include "hlavicka.h"

using namespace std;

int main()
{
    int graph [5][5] = {{0,1,1,0,0}, {1,0,0,0,0}, {1,0,0,0,0},
        {0,0,0,0,0}, {0,0,0,0,0}
    };
// constant - number of vertexes
    const int n = 5;
    // array of visited vertexes - declaration and initialization
    bool visited[n];

    int v;
// variable all carries an information if all vertexes
// were visited
    bool all = false;

    Tstruct *pStack;
// stack initialization
    StackInit(&pStack);


    for (int i = 0; i<= n-1; i++)
        visited[i] = false;
// push vertex with index 0 - the root node into the stack
    pStack = StackPush(pStack,0);
//mark root node as visited
    visited[0] = true;
//While the stack is not empty or all vertexes
//were not visited, proceed
    while (!StackIsEmpty(pStack) && !all)
    {
// pop vertex from the top of stack
        v = StackPop(&pStack);
        cout << "processing vertex: " << v << endl;
// find all unvisited neighbors of v
        for (int j=0; j <= n-1; j++ )
// push all unvisited neighbors into the stack
            if (graph[v][j] && !visited[j])
            {
                pStack = StackPush(pStack,j);
// mark them as visited
                visited[j] = true;
            }
// are all vertexes marked as visited?
        all = true;

        for (int j=0; j <= n-1; j++)
            if (!visited[j])
                all = false;
    }
// if all vertexes are reachable from the root
// the graph is connected,
    if (all) cout << "The graph is connected" << endl;
    else cout << "The graph is not connected" << endl;
    return 0;
}
